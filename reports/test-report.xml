<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\wordcounter.test.js">
    <testCase name="WordCounter should count words in the document" duration="4"/>
    <testCase name="WordCounter shouldn&apos;t count newlines, spaces or tabs" duration="0"/>
    <testCase name="WordCounter shouldn&apos;t count punctuation or other symbols as words" duration="1"/>
    <testCase name="CharacterCounter should count every single character in the document" duration="0"/>
    <testCase name="CharacterCounter should not count spaces" duration="0"/>
    <testCase name="CharacterCounter should count special character" duration="1"/>
    <testCase name="CharacterCounter should show zero, if no it has no text" duration="0"/>
  </file>
  <file path="D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js">
    <testCase name="InputStream should read strings correctly" duration="4"/>
    <testCase name="InputStream should peek characters correctly" duration="0"/>
    <testCase name="InputStream should detect the end of the string correctly" duration="1"/>
    <testCase name="InputStream should keep track of the string position" duration="0"/>
    <testCase name="InputStream should keep track of the current line and column" duration="1"/>
    <testCase name="InputStream should test regex" duration="0"/>
    <testCase name="InputStream should match regex" duration="0"/>
    <testCase name="InputStream should skip a certain amount of characters" duration="1"/>
    <testCase name="Token Regex should match headers appropriately" duration="0"/>
    <testCase name="Token Regex should match blockquotes appropriately" duration="1"/>
    <testCase name="Token Regex should match rules appropriately" duration="0"/>
    <testCase name="Token Regex should match lists appropriately" duration="1"/>
    <testCase name="Token Regex should match code blocks appropriately" duration="1"/>
    <testCase name="Token Regex should match TOCs appropriately" duration="0"/>
    <testCase name="Token Regex should match TOFs appropriately" duration="0"/>
    <testCase name="Token Regex should match pagebreaks appropriately" duration="0"/>
    <testCase name="Token Regex should match references appropriately" duration="0"/>
    <testCase name="Token Regex should match latex blocks appropriately" duration="1"/>
    <testCase name="Token Regex should match newlines appropriately" duration="0"/>
    <testCase name="Token Regex should match bold text indicators appropriately" duration="3"/>
    <testCase name="Token Regex should match italics text indicators appropriately" duration="1"/>
    <testCase name="Token Regex should match strikethrough text indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match image start indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match link start indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match image-/link-inline indicators appropriately" duration="1"/>
    <testCase name="Token Regex should match image-/link-inline indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match image-/link-end indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match code indicators appropriately" duration="1"/>
    <testCase name="Token Regex should match latex indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match latex indicators appropriately" duration="0"/>
    <testCase name="TokenStream should find the correct amount of tokens" duration="0"/>
    <testCase name="TokenStream should tokenize to the correct types" duration="1"/>
    <testCase name="TokenStream should record the correct columns and rows" duration="1"/>
    <testCase name="TokenStream should find proper header tokens" duration="2"/>
    <testCase name="TokenStream should find proper blockquotes" duration="0"/>
    <testCase name="TokenStream should find proper rules" duration="1"/>
    <testCase name="TokenStream should find proper lists" duration="1"/>
    <testCase name="TokenStream should find proper code blocks" duration="0"/>
    <testCase name="TokenStream should find proper TOCs" duration="1"/>
    <testCase name="TokenStream should find proper TOFs" duration="0"/>
    <testCase name="TokenStream should find proper pagebreaks" duration="1"/>
    <testCase name="TokenStream should find proper references" duration="0"/>
    <testCase name="TokenStream should find proper LaTeX blocks" duration="1"/>
    <testCase name="TokenStream should find proper newlines" duration="0"/>
    <testCase name="TokenStream should find proper bold indicators" duration="0"/>
    <testCase name="TokenStream should find proper italics indicators" duration="1"/>
    <testCase name="TokenStream should find proper strikethrough indicators" duration="0"/>
    <testCase name="TokenStream should find proper image start indicators" duration="0"/>
    <testCase name="TokenStream should find proper link start indicators" duration="0"/>
    <testCase name="TokenStream should find proper image-/link inline indicators" duration="0"/>
    <testCase name="TokenStream should find proper image-/link reference indicators" duration="1"/>
    <testCase name="TokenStream should find proper image-/link end indicators" duration="0"/>
    <testCase name="TokenStream should find proper code indicators" duration="0"/>
    <testCase name="TokenStream should find proper latex indicators" duration="1"/>
    <testCase name="TokenStream should find proper latex indicators" duration="0"/>
    <testCase name="Parser should parse the right amount of components" duration="1"/>
    <testCase name="Parser should parse headers" duration="1"/>
    <testCase name="Parser should parse block quotes" duration="3"/>
    <testCase name="Parser should parse list heads" duration="2"/>
    <testCase name="Parser should parse lists" duration="35">
      <failure message="Error: expect(received).toBe(expected) // Object.is equality"><![CDATA[Error: expect(received).toBe(expected) // Object.is equality

Expected value to be:
  6
Received:
  3
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1088:34)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
  </file>
  <file path="D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js">
    <testCase name="Test Header should set left text in header" duration="9"/>
    <testCase name="Test Header should set middle text in header" duration="2"/>
    <testCase name="Test Header should set right text in header" duration="2"/>
    <testCase name="Test Footer should set left text in footer" duration="15">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  " Semester "
Received:
  "  "
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:57:43)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Test Footer should set middle text in footer" duration="3">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  " 1 "
Received:
  "  "
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:63:45)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Test Footer should set right text in footer" duration="1">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  " KÃ¼rzel "
Received:
  "  "
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:69:44)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Test Zoom begins with zoom set to 1.0" duration="9"/>
    <testCase name="Test Zoom does not zoom the zoom buttons" duration="3"/>
    <testCase name="Test Zoom can zoom in" duration="2">
      <failure message="Error: expect(received).toBeCloseTo(expected)"><![CDATA[Error: expect(received).toBeCloseTo(expected)

Expected value to be close to (with 2-digit precision):
  1.1
Received:
  1
    at D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:95:36
    at Array.forEach (<anonymous>)
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:92:41)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Test Zoom can zoom out" duration="2">
      <failure message="Error: expect(received).toBeCloseTo(expected)"><![CDATA[Error: expect(received).toBeCloseTo(expected)

Expected value to be close to (with 2-digit precision):
  0.9
Received:
  1
    at D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:106:36
    at Array.forEach (<anonymous>)
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:103:31)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Test Zoom doesn&apos;t go below minimum zoom" duration="4"/>
    <testCase name="Test Zoom doesn&apos;t go above maximum zoom" duration="3"/>
    <testCase name="Test Zoom invokes handleZoomIn on zoom-in button click" duration="17">
      <failure message="Error: expect(received).toBeCloseTo(expected)"><![CDATA[Error: expect(received).toBeCloseTo(expected)

Expected value to be close to (with 2-digit precision):
  1.1
Received:
  1
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:133:34)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Test Zoom invokes handleZoomOut on zoom-out button click" duration="5">
      <failure message="Error: expect(received).toBeCloseTo(expected)"><![CDATA[Error: expect(received).toBeCloseTo(expected)

Expected value to be close to (with 2-digit precision):
  0.9
Received:
  1
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\react.test.js:142:34)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Test sidebar opens and closes when clicked" duration="7"/>
    <testCase name="Test sidebar tracks mouse hovering and leaving the sidebar area" duration="4"/>
    <testCase name="Test sidebar updates state with info filled into fields" duration="15"/>
  </file>
</testExecutions>