<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js">
    <testCase name="InputStream should read strings correctly" duration="3"/>
    <testCase name="InputStream should peek characters correctly" duration="1"/>
    <testCase name="InputStream should detect the end of the string correctly" duration="1"/>
    <testCase name="InputStream should keep track of the string position" duration="0"/>
    <testCase name="InputStream should keep track of the current line and column" duration="1"/>
    <testCase name="InputStream should test regex" duration="0"/>
    <testCase name="InputStream should match regex" duration="1"/>
    <testCase name="InputStream should skip a certain amount of characters" duration="0"/>
    <testCase name="InputStream should skip to the next row(for testing purposes)" duration="1"/>
    <testCase name="Token Regex should match headers appropriately" duration="0"/>
    <testCase name="Token Regex should match blockquotes appropriately" duration="0"/>
    <testCase name="Token Regex should match rules appropriately" duration="1"/>
    <testCase name="Token Regex should match lists appropriately" duration="0"/>
    <testCase name="Token Regex should match code blocks appropriately" duration="1"/>
    <testCase name="Token Regex should match TOCs appropriately" duration="3"/>
    <testCase name="Token Regex should match TOFs appropriately" duration="0"/>
    <testCase name="Token Regex should match pagebreaks appropriately" duration="0"/>
    <testCase name="Token Regex should match references appropriately" duration="0"/>
    <testCase name="Token Regex should match latex blocks appropriately" duration="0"/>
    <testCase name="Token Regex should match newlines appropriately" duration="0"/>
    <testCase name="Token Regex should match bold text indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match italics text indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match strikethrough text indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match image start indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match link start indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match image-/link-end indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match code indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match latex indicators appropriately" duration="0"/>
    <testCase name="Token Regex should match latex indicators appropriately" duration="0"/>
    <testCase name="TokenStream should find the correct amount of tokens" duration="1"/>
    <testCase name="TokenStream should tokenize to the correct types" duration="0"/>
    <testCase name="TokenStream should record the correct columns and rows" duration="1"/>
    <testCase name="TokenStream should find proper header tokens" duration="1"/>
    <testCase name="TokenStream should find proper blockquotes" duration="0"/>
    <testCase name="TokenStream should find proper rules" duration="1"/>
    <testCase name="TokenStream should find proper lists" duration="0"/>
    <testCase name="TokenStream should find proper code blocks" duration="1"/>
    <testCase name="TokenStream should find proper TOCs" duration="0"/>
    <testCase name="TokenStream should find proper TOFs" duration="0"/>
    <testCase name="TokenStream should find proper pagebreaks" duration="1"/>
    <testCase name="TokenStream should find proper references" duration="0"/>
    <testCase name="TokenStream should find proper LaTeX blocks" duration="1"/>
    <testCase name="TokenStream should find proper newlines" duration="0"/>
    <testCase name="TokenStream should find proper bold indicators" duration="0"/>
    <testCase name="TokenStream should find proper italics indicators" duration="1"/>
    <testCase name="TokenStream should find proper strikethrough indicators" duration="0"/>
    <testCase name="TokenStream should find proper image start indicators" duration="0"/>
    <testCase name="TokenStream should find proper link start indicators" duration="0"/>
    <testCase name="TokenStream should find proper image-/link end indicators" duration="1"/>
    <testCase name="TokenStream should find proper code indicators" duration="0"/>
    <testCase name="TokenStream should find proper latex indicators" duration="0"/>
    <testCase name="TokenStream should find proper latex indicators" duration="1"/>
    <testCase name="TokenStream should skip to the next row(for testing purposes)" duration="0"/>
    <testCase name="Parser should parse the right amount of components" duration="2"/>
    <testCase name="Parser should parse headers" duration="1"/>
    <testCase name="Parser should parse block quotes" duration="1"/>
    <testCase name="Parser should parse rules" duration="0"/>
    <testCase name="Parser should parse list heads" duration="5"/>
    <testCase name="Parser should parse list items" duration="1"/>
    <testCase name="Parser should parse lists" duration="1"/>
    <testCase name="Parser should parse Code blocks" duration="1"/>
    <testCase name="Parser should parse TOCs" duration="1"/>
    <testCase name="Parser should parse TOFs" duration="0"/>
    <testCase name="Parser should parse pagebreaks" duration="1"/>
    <testCase name="Parser should parse references" duration="0"/>
    <testCase name="Parser should parse LaTeX blocks" duration="10"/>
    <testCase name="Parser should parse softbreaks" duration="0"/>
    <testCase name="Parser should parse paragraphs" duration="0"/>
    <testCase name="Parser should parse any string sequence" duration="7"/>
    <testCase name="Parser should parse text rows" duration="0"/>
    <testCase name="Parser should parse a text token" duration="1"/>
    <testCase name="Parser should reinterpret failed formatting as text" duration="0"/>
    <testCase name="Parser should parse bold text" duration="2"/>
    <testCase name="Parser should parse italicized text" duration="1"/>
    <testCase name="Parser should parse strikethrough text" duration="2"/>
    <testCase name="Parser should parse inline latex" duration="2"/>
    <testCase name="Parser should parse links" duration="3"/>
    <testCase name="Parser should parse images" duration="3"/>
    <testCase name="Parser Should parse a document to an array" duration="1"/>
    <testCase name="Parser Should parse a document to a DOM" duration="2"/>
    <testCase name="LaTeX Parser should parse latex" duration="1"/>
    <testCase name="LaTeX Parser should know if an expression has been parsed before" duration="1"/>
    <testCase name="LaTeX Parser should return cached expressions" duration="0"/>
    <testCase name="LaTeX Parser should cache expression-html-pairs" duration="1"/>
    <testCase name="LaTeX Parser should throw out cached expressions when limit reached" duration="3"/>
    <testCase name="Markdown parser should parse headers correctly" duration="1"/>
    <testCase name="Markdown parser should parse formatted paragraphs correctly" duration="55">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  "Hi there! Image: alt text; Ref: alt text2"
Received:
  "Hi there! Image: alt text](./img.png); Ref: alt text2](https://duckduckgo.com/)"
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1730:28)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Markdown parser should parse an ordered list correctly" duration="4">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  "1. first
2. second!
3. third though!
4. fourth
5. fifth"
Received:
  "1. first
2. second!
3. third though!

5. fourth
6. fifth"

Difference:

- Expected
+ Received

  1. first
  2. second!
  3. third though!
- 4. fourth
- 5. fifth
+ 
+ 5. fourth
+ 6. fifth
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1744:30)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Markdown parser should parse an unordered list correctly" duration="2">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  "first
second
third"
Received:
  "- first
- second
- third"

Difference:

- Expected
+ Received

- first
- second
- third
+ - first
+ - second
+ - third
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1754:28)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Markdown parser should parse nested lists correctly" duration="0"/>
    <testCase name="Markdown parser should output Html code correctly" duration="2">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  "<h1>Testheader 1</h1>
<p>Bla<strong>blabla</strong>.</p>
<h2>Second test header</h2>
<ol><li><p>first</p></li><li><p>second</p></li></ol>"
Received:
  "<h1>Testheader 1</h1>
<p>Bla<strong>blabla</strong>.</p>
<h2>Second test header</h2>
<ol><li>first</li><li>second</li></ol>"

Difference:

- Expected
+ Received

  <h1>Testheader 1</h1>
  <p>Bla<strong>blabla</strong>.</p>
  <h2>Second test header</h2>
- <ol><li><p>first</p></li><li><p>second</p></li></ol>
+ <ol><li>first</li><li>second</li></ol>
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1772:26)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Markdown parser should output the same source when calling toMarkDown() after parsing" duration="1"/>
    <testCase name="Markdown parser should correctly convert markdown to formatless string" duration="1"/>
    <testCase name="Markdown parser should parse the right source positions" duration="1">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  1
Received:
  undefined

Difference:

  Comparing two different types of values. Expected number but received undefined.
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1798:29)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Markdown parser should parse one TOC and only one" duration="2">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  1
Received:
  0
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1811:37)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
    <testCase name="Markdown parser should parse one TOF and only one" duration="1">
      <failure message="Error: expect(received).toEqual(expected)"><![CDATA[Error: expect(received).toEqual(expected)

Expected value to equal:
  1
Received:
  0
    at Object.<anonymous> (D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\markdown.test.js:1821:19)
    at Object.asyncFn (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\jasmine_async.js:82:37)
    at resolve (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:52:12)
    at new Promise (<anonymous>)
    at mapper (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:39:19)
    at promise.then (D:\Users\Raphael\Dokumente\Git\markdoc\node_modules\jest-jasmine2\build\queue_runner.js:73:82)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)]]></failure>
    </testCase>
  </file>
  <file path="D:\Users\Raphael\Dokumente\Git\markdoc\__tests__\wordcounter.test.js">
    <testCase name="WordCounter should count words in the document" duration="1"/>
    <testCase name="WordCounter shouldn&apos;t count newlines, spaces or tabs" duration="0"/>
    <testCase name="WordCounter shouldn&apos;t count punctuation or other symbols as words" duration="1"/>
    <testCase name="CharacterCounter should count every single character in the document" duration="0"/>
    <testCase name="CharacterCounter should not count spaces" duration="0"/>
    <testCase name="CharacterCounter should count special character" duration="1"/>
    <testCase name="CharacterCounter should show zero, if no it has no text" duration="0"/>
  </file>
</testExecutions>